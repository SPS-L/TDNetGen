function [matpower_path, constant_load, random, penetration_level, generation_weight, large_system, oversize, verbose, export_format, run_opf, pf_setpoint, opf_setpoint, dg_iterations] = parameters
% Where the user defines all the important parameters

% Location of the matpower folder (relative or absolute)
matpower_path = 'matpower7.1';

% Percentage of power input to be generated by PV ( a penetration_level of zero 
% cannot be combined with run_opf = true)
penetration_level = 0.5;

% Does the DN consumption (seen by the TN) stay constant when PV generation
% is introduced ? (cannot be combined with run_opf = true)
constant_load = false;

% Introduce small randomization of parameters to avoid artificial synchronization due to 
% identical systems
random = true;

% Percentage of the PV generation by the feeders ??? with the larger DERs
generation_weight = 0.5;

% Select the size of the final T&D system (false: ~15k, true:~22k nodes)
% True: All the aggregated TN loads are replaced by detailed DNs
% False: Only the aggregated TN loads in the Central area are replaced by detailed DNs
large_system = false;

% Overload the DNs (default = 1, max = 2, the supplied OPF procedure might fail for high 
% overloadings)
oversize = 1.0;

% Format in which the power flow data is saved (matpower, artere, ramses or none)
% Only one can be chosen.
export_format = 'ramses';

% Select if you want to perform an OPF solution with the provided formulation to fix any
% voltage or congestion problems before exporting the data
% This option significantly increases computational time
run_opf = true;

% The results of the intermediate calls to Matpower are printed in command window.
verbose = false;

% Setpoint for the voltage at the first node of the DN. Used for fixing the distribution
% transformer LTC deadband
pf_setpoint = 1.03;

% Setpoint for the voltage at the first node of the DN. Used for fixing the distribution
% transformer LTC deadband
opf_setpoint = 1.00;

% Number of iterations allowed for the algorithm to find a DN with the
% correct amount of distributed generation
dg_iterations = 10;
end